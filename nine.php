<?php
const BR = '<br>';
const HR = '<hr>';

echo BR;
echo HR;
// =====================================================================================================================
?>

<style>
    body {
        font-size: 26px;
        line-height: 30px;
    }
</style>

<!DOCTYPE html>
<html lang="ru">
<head>
    <title>Альтернативный синтаксис if-else.</title>
    <meta charset='utf-8'>
</head>
<body>
<?php if (isset($_REQUEST['go'])): ?>
    Привет, <?= $_REQUEST['name'] ?>!
<?php else: ?>
    <form action="<?= $_SERVER['REQUEST_URI'] ?>" method="POST">
        Ваше имя: <input type="text" name="name"><br/>
        <input type="submit" name="go" value="Отослать!">
    </form>
<?php endif ?>
</body>
</html>


<?php
echo BR;
echo HR;
// =====================================================================================================================


## Вывод всех степеней двойки до 2^31 включительно.
$i = 1;
$p = 1;
while ($i < 32) {
    echo $p, " " . BR;
    $p *= 2;
    $i++;
}

echo BR;
echo HR;
// =====================================================================================================================

## Демонстрация цикла for
for ($i = 0, $j = 0, $k = "Points"; $i < 12; $j++, $i += $j) {
    $k = $k . ".";
}
echo $k; // Points..............

$i = 0;
$j = 0;
$k = "Points";
while ($i < 12) {
    $k .= ".";
    $j++;
    $i += $j;
}
echo $k;

echo BR;
echo HR;
// =====================================================================================================================
?>


<!DOCTYPE html>
<html lang="ru">
<head>
    <title>Модель сценария для обработки формы</title>
    <meta charset='utf-8'>
</head>
<body>
<?php
$WasError = 0; // индикатор ошибки - если не 0, то была ошибка
// Если нажали кнопку Submit (с именем $doSubmit)...
if (isset($_REQUEST['doSubmit'])) {
    do {
        // Проверка входных данных
        if ($_REQUEST['reloads'] != 1 + 1 + 7) {
            $WasError = 1;
            break;
        }
        if ($_REQUEST['loader'] != "source") {
            $WasError = 1;
            break;
        }
        // и т. д. - здесь может быть множество других проверок.
        // ...
        // В этой точке данные точно в порядке. Обрабатываем их.
        echo "Вы внимательный человек, поздравляем!<br />";
        // Можно записать данные в файл.
        exit();
    } while (0);
}
// Произошла ли ошибка?
if ($WasError) {
    echo "Вы ответили неверно, попробуйте еще раз.";
}
?>
<!-- Выводим форму, через которую пользователь будет запускать этот
сценарий, и, возможно, отображаем сообщение об ошибке в случае,
если $WasError != 0. -->
<form action="<?= $_SERVER['REQUEST_URI'] ?>" method="POST">
    Число перезагрузок: <input type="text" name="reloads"><br/>
    Загрузочная программа: <input type="text" name="loader"><br/>
    <input type="submit" name="doSubmit" value="Ответить на вопросы">
</form>
</body>
</html>


<?php

echo BR;
echo HR;
// =====================================================================================================================


## Вывод всех переменных окружения.
foreach ($_SERVER as $k => $v) {
    echo "<b>$k</b> => $v<br />";
}


echo BR;
echo HR;
// =====================================================================================================================

?>

<!--Демонстрация конструкции require_once. ///// require же ИСПОЛЬЗОВАТЬ ТОЛЬКО ДЛЯ РАЗДЕЛЕНИЯ HTML на шапку и подвал-->
<?php ## Тело скрипта.
require_once "head.html";
print_r($GLOBALS);
require_once "foot.html";

echo BR;
echo HR;
// =====================================================================================================================












































